"use strict";

var _ = _interopRequireDefault(require("."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/** Demo auth options */
var _authOptions = {
  clientId: 'com.example.web',
  scope: 'email name',
  redirectURI: 'https://example.com',
  state: 'state',
  nonce: 'nonce',
  usePopup: true
};
/** Response */

var AppleIDAuthSignInFnResponse = {
  success: true
};
describe('appleAuthHelpers', function () {
  var AppleIDAuthInitFn;
  var AppleIDAuthSignInFn;
  beforeEach(function () {
    /** Mock apple funcs */
    AppleIDAuthInitFn = jest.fn(function () {
      return Promise.resolve(true);
    });
    AppleIDAuthSignInFn = jest.fn(function () {
      return Promise.resolve(AppleIDAuthSignInFnResponse);
    });
    /** Mock window object */

    window.AppleID = {
      auth: {
        init: AppleIDAuthInitFn,
        signIn: AppleIDAuthSignInFn
      }
    };
  });
  it('should call apple functions with proper params upon signIn', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var input;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            input = {
              authOptions: _authOptions
            };
            _context.next = 3;
            return _.default.signIn(input);

          case 3:
            expect(window.AppleID.auth.init).toHaveBeenCalled();
            expect(window.AppleID.auth.init.mock.calls[0][0]).toEqual(expect.objectContaining(_objectSpread({}, input.authOptions)));
            expect(window.AppleID.auth.init.mock.calls[0]).toBeDefined();

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should return undefined and log error if apple script is not loaded', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var input, response;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            window.AppleID = null;
            input = {
              authOptions: _authOptions
            };
            _context2.next = 4;
            return _.default.signIn(input);

          case 4:
            response = _context2.sent;
            expect(response).toBeUndefined();

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('should return undefined and call onError if apple script is not loaded', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var input, response;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            window.AppleID = null;
            input = {
              authOptions: _authOptions,
              onError: jest.fn()
            };
            _context3.next = 4;
            return _.default.signIn(input);

          case 4:
            response = _context3.sent;
            expect(response).toBeUndefined();
            expect(input.onError.mock.calls[0][0]).toEqual(expect.any(Error));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('should call onSuccess upon success', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var input;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            input = {
              authOptions: _authOptions,
              onSuccess: jest.fn()
            };
            _context4.next = 3;
            return _.default.signIn(input);

          case 3:
            expect(input.onSuccess.mock.calls[0][0]).toEqual(AppleIDAuthSignInFnResponse);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
});
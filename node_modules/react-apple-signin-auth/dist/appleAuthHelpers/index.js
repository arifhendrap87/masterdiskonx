"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _waitForVar = _interopRequireDefault(require("../utils/waitForVar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Performs an apple ID signIn operation
 */
var signIn = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var authOptions, onSuccess, onError, response;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            authOptions = _ref.authOptions, onSuccess = _ref.onSuccess, onError = _ref.onError;
            _context.prev = 1;
            _context.next = 4;
            return (0, _waitForVar.default)('AppleID');

          case 4:
            /** Handle if appleID script was not loaded -- log + throw error to be caught below */
            if (!window.AppleID) {
              console.error(new Error('Error loading apple script'));
            }
            /** Init apple auth */


            window.AppleID.auth.init(authOptions);
            /** Signin to appleID */

            _context.next = 8;
            return window.AppleID.auth.signIn();

          case 8:
            response = _context.sent;

            /** This is only called in case usePopup is true */
            if (onSuccess) {
              onSuccess(response);
            }
            /** resolve with the reponse */


            return _context.abrupt("return", response);

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](1);

            if (onError) {
              /** Call onError catching the error */
              onError(_context.t0);
            } else {
              /** Log the error to help debug */
              console.error(_context.t0);
            }

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 13]]);
  }));

  return function signIn(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _default = {
  signIn: signIn
};
exports.default = _default;
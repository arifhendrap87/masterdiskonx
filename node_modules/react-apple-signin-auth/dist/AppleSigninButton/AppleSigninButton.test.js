"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _AppleSigninButton = _interopRequireDefault(require("./AppleSigninButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var authOptions = {
  clientId: 'com.example.web',
  scope: 'email name',
  redirectURI: 'https://example.com',
  state: 'state',
  nonce: 'nonce',
  usePopup: true
};

var setupAppleSigninButton = function setupAppleSigninButton(overrideProps) {
  return /*#__PURE__*/_react.default.createElement(_AppleSigninButton.default, _extends({
    authOptions: authOptions
  }, overrideProps));
};

describe('<AppleSigninButton />', function () {
  it('renders basic props correctly', function () {
    var wrapper = (0, _enzyme.shallow)(setupAppleSigninButton());
    expect(wrapper).toMatchSnapshot();
  });
  it('skips script addition via prop', function () {
    var wrapper = (0, _enzyme.shallow)(setupAppleSigninButton({
      skipScript: true
    }));
    expect(wrapper).toMatchSnapshot();
  });
  it('render UI type properly', function () {
    var wrapperLight = (0, _enzyme.shallow)(setupAppleSigninButton({
      uiType: 'light'
    }));
    expect(wrapperLight).toMatchSnapshot();
    var wrapperDark = (0, _enzyme.shallow)(setupAppleSigninButton({
      uiType: 'dark'
    }));
    expect(wrapperDark).toMatchSnapshot();
  });
  it('should use render prop', function () {
    var wrapper = (0, _enzyme.shallow)(setupAppleSigninButton({
      render: function render(props) {
        return /*#__PURE__*/_react.default.createElement("button", _extends({
          id: "test-btn"
        }, props));
      }
    }));
    expect(wrapper).toMatchSnapshot();
  });
  it('pass icon props to svg', function () {
    var wrapper = (0, _enzyme.shallow)(setupAppleSigninButton({
      iconProps: {
        width: '30px'
      }
    }));
    expect(wrapper).toMatchSnapshot();
  });
  it('gracefully handles falsy authOptions', function () {
    var wrapper = (0, _enzyme.shallow)(setupAppleSigninButton({
      authOptions: null
    }));
    expect(wrapper).toMatchSnapshot();
  });
});
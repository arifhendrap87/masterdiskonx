"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Async wait for a variable till it gets defined in a parent
 *
 * â€¢ Usage Example: Waiting for async window.FB var to be initialized
 * - eg: `waitForVar('FB').then(FB => FB.test())`
 * - eg: `waitForVar('FB', { pollFrequency: 500, retries: 2, parent: window || global }).then(FB => FB.test())`
 * - eg: `waitForVar('FB', { retries: ({ retries } => retries * 500) }).then(FB => FB.test())`
 */
var waitForVar = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name) {
    var _ref2,
        _ref2$pollFrequency,
        pollFrequency,
        _ref2$retries,
        inRetries,
        _ref2$parent,
        parent,
        retries,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref2 = _args.length > 1 && _args[1] !== undefined ? _args[1] : {
              pollFrequency: 1000,
              retries: 100,
              parent: window
            }, _ref2$pollFrequency = _ref2.pollFrequency, pollFrequency = _ref2$pollFrequency === void 0 ? 1000 : _ref2$pollFrequency, _ref2$retries = _ref2.retries, inRetries = _ref2$retries === void 0 ? 100 : _ref2$retries, _ref2$parent = _ref2.parent, parent = _ref2$parent === void 0 ? window : _ref2$parent;

            if (!(parent && parent.hasOwnProperty(name))) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", parent[name]);

          case 3:
            if (inRetries) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", undefined);

          case 5:
            retries = inRetries - 1;
            _context.next = 8;
            return new Promise(function (resolve) {
              return setTimeout(resolve, typeof pollFrequency === 'function' ? pollFrequency({
                retries: retries
              }) : pollFrequency);
            });

          case 8:
            return _context.abrupt("return", waitForVar(name, {
              pollFrequency: pollFrequency,
              parent: parent,
              retries: retries
            }));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function waitForVar(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = waitForVar;
exports.default = _default;